// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  voiceModels VoiceModel[]
  originalMusics OriginalMusic[]
  reports Report[]
  musicEvaluations MusicEvaluation[]
  userVoiceModelPurchases UserVoiceModelPurchase[]
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserVoiceModelPurchase {
  id      String    @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  voiceModelId String
  voiceModel VoiceModel @relation(fields: [voiceModelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([voiceModelId])
  @@unique([voiceModelId])
}

model VoiceModel {
  id      String    @id @default(cuid())
  url     String
  userId  String
  voiceId Int
  title String
  thumbnailUrl String
  description String
  rule String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  musics Music[]
  userVoiceModelPurchase UserVoiceModelPurchase?
  createdAt DateTime @default(now())

  @@index([userId])
}

model OriginalMusic {
  id      String    @id @default(cuid())
  title   String
  description String
  thumbnailUrl String
  url     String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  musics Music[]
  createdAt DateTime @default(now())

  @@index([userId])
}

model Music {
  id      String    @id @default(cuid())
  title   String
  description String
  url     String
  thumbnailUrl String
  originalMusicId String
  originalMusic OriginalMusic @relation(fields: [originalMusicId], references: [id], onDelete: Cascade)
  voiceModelId String
  voiceModel VoiceModel @relation(fields: [voiceModelId], references: [id], onDelete: Cascade)
  musicEvaluations MusicEvaluation[]
  createdAt DateTime @default(now())

  @@index([originalMusicId])
  @@index([voiceModelId])
}

model MusicEvaluation {
  id      String    @id @default(cuid())
  musicId String
  music Music @relation(fields: [musicId], references: [id], onDelete: Cascade)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  evaluation Int
  createdAt DateTime @default(now())

  @@index([musicId])
  @@index([userId])
  @@unique([musicId, userId])
}

model Report {
  id String @id @default(cuid())
  description String
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  musicId String
  originalMusicId String
  vocalModelId String
  createdAt DateTime @default(now())

  @@index([userId])
}
